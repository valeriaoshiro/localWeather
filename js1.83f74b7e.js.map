{"version":3,"sources":["js1.js"],"names":["latitude","longitude","city","temperatureF","temperatureC","description","icon","cityChoices","fromChoices","degreeSymbol","String","fromCharCode","WEATHERAPIKEY","GEOCODINGAPIKEY","elCity","document","getElementById","elInputText","elTemperature","elDescription","elIcon","elUnit","elDegree","elInputSubmit","elChoices","init","navigator","geolocation","getCurrentPosition","position","coords","getWeatherAndCity","addEventListener","convertUnit","getInputEnter","getInputSubmit","lat","lon","cityX","urltemp","$","getJSON","data","Math","floor","main","temp","textContent","className","weather","img","createElement","src","alt","firstChild","removeChild","appendChild","name","sys","country","style","display","Number","e","keyCode","which","value","getLatLon","preventDefault","c","url","replace","inputCityOptions","results","locations","length","p","innerHTML","ul","i","li","cityData","adminArea5","stateData","adminArea3","countryData","adminArea1","formatedCity","cityClick","push","latLng","lng","target","ready"],"mappings":"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","file":"js1.83f74b7e.js","sourceRoot":"..","sourcesContent":["//get user's automatically location\n//convert city to lat/lon\n//get weather\n//write city\n//write weather\n//get user's input location\n\nvar latitude, longitude, city, temperatureF, temperatureC, description, icon;\nvar cityChoices = [];\nvar fromChoices = false;\nlet degreeSymbol = String.fromCharCode(176);\nconst WEATHERAPIKEY = process.env.WEATHER_API_KEY;\nconst GEOCODINGAPIKEY = process.env.GEOCODING_API_KEY;\n//starts with el(as in element) to show it's a HTML element\nvar elCity = document.getElementById(\"city\");\nvar elInputText = document.getElementById(\"inputText\");\nvar elTemperature = document.getElementById(\"temperature\");\nvar elDescription = document.getElementById(\"description\");\nvar elIcon = document.getElementById(\"icon\");\nvar elUnit = document.getElementById(\"unit\");\nvar elDegree = document.getElementById(\"degree\");\nvar elInputSubmit = document.getElementById(\"inputSubmit\");\nvar elChoices = document.getElementById(\"choices\");\n\nfunction init(){\n\tif(navigator.geolocation){ //get user's lat and lon\n\t\tnavigator.geolocation.getCurrentPosition(function(position) {\n\t\t\tlatitude = position.coords.latitude;\n         \tlongitude = position.coords.longitude;\n         \tgetWeatherAndCity(latitude, longitude);\n\t\t})\n\t}\t\t\t\t\n\telUnit.addEventListener(\"click\", convertUnit, false); //change from F to C, and the other way around\n\telInputText.addEventListener(\"keyup\", getInputEnter, false); //gets the value from input box when enter key is pressed\n\telInputSubmit.addEventListener(\"click\", getInputSubmit, false); //gets the value from input when submit button is clicked\n}\n\nfunction getWeatherAndCity(lat, lon, cityX){ //gets the weather, then calls writeWeatherAndCity to write it\n\tvar urltemp = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${WEATHERAPIKEY}&units=imperial`;\n\t$.getJSON(urltemp, function(data){\n\t\t//write the temp\n\t\ttemperatureF = Math.floor(data.main.temp);\n\t\ttemperatureC = Math.floor((temperatureF - 32) / 1.8);\n\t\telTemperature.textContent = temperatureF;\n\t\telDegree.textContent = degreeSymbol+\"F\";\n\t\telUnit.className = \"F\";\n\t\t//write the description\n\t\tdescription = data.weather[0].main;\n\t\telDescription.textContent = description;\n\t\t//write the icons depending on description\n\t\tlet img = document.createElement('img');\t\n\t\timg.src = `https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`;\t\n\t\timg.alt = `${data.weather.description} icon`;\n\t\twhile(elIcon.firstChild)\n\t\t\telIcon.removeChild(elIcon.firstChild);\n\t\telIcon.appendChild(img);\n\t\t\n\t\t//write the city, and needs to remove the bottom div (if there is any)\t\n\t\tif(cityX){\n\t\t\tcity = cityX;\n\t\t} else {\n\t\t\tcity = `${data.name}, ${data.sys.country}`;\n\t\t}\n\t\t\n\t\telCity.textContent = city;\n\t\twhile (elChoices.firstChild) {\n\t   \telChoices.removeChild(elChoices.firstChild);\n\t\t}\n\t\telChoices.style.display = \"none\";\t\n\t});\n}\n\nfunction convertUnit(){ //change from F to C, and the other way around\n\tvar tempNum = Number(elTemperature.textContent);\n\tif(elUnit.className === \"F\"){ //if already F, change to C\n\t\telTemperature.textContent = temperatureC;\t\n\t\telDegree.textContent = degreeSymbol+\"C\";\n\t\telUnit.className = \"C\";\n\t} else { //if already C, change to F\n\t\telTemperature.textContent = temperatureF;\t\n\t\telDegree.textContent = degreeSymbol+\"F\";\n\t\telUnit.className = \"F\";\n\t}\n}\n\nfunction getInputEnter(e){ //gets the value from input box when Enter key is pressed, calls getLatLon\n\tvar keyCode = e.keyCode || e.which;\n\tif (keyCode === '13'){\n\t\tvar city = elInputText.value;\n\t\telInputText.value = \"\";\n\t\tgetLatLon(city);\n\t}\n}\n\nfunction getInputSubmit(e){ //gets the value from input when submit button is pressed, calls getLatLon\n\te.preventDefault();\n\tvar city = elInputText.value;\n\telInputText.value = \"\";\n\tgetLatLon(city);\n}\t\n\nfunction getLatLon(c){ //gets the city, converts to latitude and longitude. calls inputCityOptions to validate city\n\tvar url = c.replace(/\\s/g, \"+\");\n\turl = `https://open.mapquestapi.com/geocoding/v1/address?key=${GEOCODINGAPIKEY}&location=${url}&thumbMaps=false&maxResults=5`;\n\n\t$.getJSON(url, inputCityOptions);\n}\n\nfunction inputCityOptions(data){ \n\tif(data.results[0].locations.length === 0) { //invalid city input\n\t\telChoices.style.display = \"block\";\n\t\tvar p = document.createElement(\"p\");\n\t\tp.innerHTML = \"City not found\"; \n\t\telChoices.appendChild(p);\n\t} else {\n\t\telChoices.style.display = \"block\";\n\t\twhile (elChoices.firstChild) {\n   \t\t\telChoices.removeChild(elChoices.firstChild);\n\t\t}\n\t\tcityChoices = [];\n\t\tvar ul = document.createElement(\"ul\");\n\t\tfor(var i = 0; i < data.results[0].locations.length; i++){\n\t\t\tvar li = document.createElement(\"li\");\n\t\t\tlet cityData = data.results[0].locations[i].adminArea5;\n\t\t\tlet stateData = data.results[0].locations[i].adminArea3;\n\t\t\tlet countryData = data.results[0].locations[i].adminArea1;\n\t\t\tif(cityData && stateData && countryData){\n\t\t\t\tlet formatedCity = `${cityData} ${stateData} ${countryData}`;\n\t\t\t\tli.innerHTML =  formatedCity\n\t\t\t\tli.addEventListener('click', cityClick);\n\t\t\t\tcityChoices.push({city: formatedCity, lat: data.results[0].locations[i].latLng.lat, lng: data.results[0].locations[i].latLng.lng});\n\t\t\t\tul.appendChild(li);\n\t\t\t}\n\t\t}\n\t\telChoices.appendChild(ul);\n\t}\n}\n\nfunction cityClick(city){\n\tfor(var i = 0; i < cityChoices.length; i++){\n\t\tif(city.target.innerHTML === cityChoices[i].city){\n\t\t\tgetWeatherAndCity(cityChoices[i].lat, cityChoices[i].lng, cityChoices[i].city);\n\t\t}\n\t}\n}\n\n//executes when DOM is fully loaded\n$().ready(function () {\n\tinit();//starts the code\n});"]}